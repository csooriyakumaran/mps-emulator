<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="generator" content="CoffeeCup HTML Editor (www.coffeecup.com)">
    <meta name="dcterms.created" content="Mon, 15 Sep 2014 15:47:11 GMT">
    <meta name="description" content="">
    <meta name="keywords" content="">
    <title>Cal-Val</title>
	
    <!--[if IE]>
    <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
  </head>

	<style>
	
		#footer {
   		position:absolute;
   		bottom:0;
   		width:100%;
   		height:60px;
		}			
	
	</style>	

	<script language="JavaScript">

  	var iTimer = null;      
		var CalValConnect;
		var CalValStartConnect;
		var LogDataConnect;
		var DelAllConnect;
		var CalPtsConnect;
		var SaveConnect;
		var nStop;	// Flag for stop calibration
		var logTextBuf = "";
		var CalzConnect;

		// Called when page loads
		function Jload() {
			LoadCalValStartConnect();			// CalVal start connection
			LoadCalValConnect();					// CalVal connection for variables
			LoadLogDataConnect();					// Log data connection
			LoadDelAllConnect();					// Delete all
			LoadCalPtsConnect();					// CalPts command
			LoadSaveConnect();						// Save c command
			GetCalValConnect();						// Call this to update variables
	  	LoadCalzConnect();
		} // End Jload

		// Create a connection to the server for stop scan.
		function LoadCalzConnect() {
			// Create a connection to the server.
			CalzConnect = new XMLHttpRequest();
		}

  	function docalz() {
			GetCalzConnect();
//		var w = window.open('','','width=400,height=200');
			var w = window.open('','','_parent');
			w.document.write('Performing zero calibration. This page will automatically close in 15 seconds. Please do not leave this page while active');
			w.focus();
			setTimeout(function() {w.close();}, 15000);
		}

		function GetCalzConnect() {
	
			// Set up the event handler for the asynchronous data request.
			CalzConnect.onreadystatechange = ProcessCalzChange;
			CalzConnect.open("GET", "calz.txt", true);		 // The file to get calz
			CalzConnect.send();
		}

		function ProcessCalzChange() {
			// Check the return status.
			if ((CalzConnect.readyState == 4) && (CalzConnect.status == 200)) {
				var rtext = CalzConnect.responseText;
			// Nothing to get
			} // End if have data
		}

		// Create a connection to the server.
		function LoadSaveConnect() {
			SaveConnect = new XMLHttpRequest();
		} // End LoadCalValConnect

		// Create a connection to the server.
		function LoadCalValConnect() {
			CalValConnect = new XMLHttpRequest();
		} // End LoadCalValConnect

		// Create a connection to the server for starting calval
		function LoadCalValStartConnect() {
			// Create a connection to the server.
			CalValStartConnect = new XMLHttpRequest();
		} // End LoadRemoteConnectSearch

		// Create a connection to the server.
		function LoadLogDataConnect() {
			LogDataConnect = new XMLHttpRequest();
		} // End LoadCalValConnect

		// Create a connection to the server.
		function LoadCalPtsConnect() {
			CalPtsConnect = new XMLHttpRequest();
		} // End LoadCalPtsConnect

		// Called on load to get original settings
		function GetCalValConnect() {
			// Set up the event handler for the asynchronous data request.
			CalValConnect.onreadystatechange = ProcessTextChange;

			// Create the request and send it.
			CalValConnect.open("GET", "calval.txt", true);		 // The file to get calval.txt
			CalValConnect.send();
		} // End GetCalValConnect

		// Create a connection to the server.
		function LoadDelAllConnect() {
			DelAllConnect = new XMLHttpRequest();
		} // End LoadDelAllConnect


		// Start a calval, called from start
		function StartCalVal() {
			nStop = 0;
			iTimer = setInterval(function(){timerhandler()},2000);	// Set to update every 2 sec
			GetCalValStartConnect();
		} // End start cal val

		// Stop a calval, called from stop
		function StopCalVal() {
			logTextBuf += "Cal/val stopped\r\n"; 
			document.getElementById("logtext").value = logTextBuf;

			nStop = 1;
			clearInterval(iTimer);
			GetCalValStartConnect();
		} // End start cal val

		function GetCalValStartConnect() {
			var sendstr;

			if (nStop == 1) {
   				sendstr = "stopcv.txt";
			} else {
				// Start a cal val, create start strings here based on type of cal val
   			if ((document.getElementById("idC").checked) && (document.getElementById("idV").checked)) {
   				// CalVal
   				sendstr = "startcv.txt";
   			} else if (document.getElementById("idC").checked) {
   				// Cal
   				sendstr = "startca.txt";
   			} else if (document.getElementById("idV").checked) {
   				sendstr = "startva.txt";
   			} else {
   				alert("No calibration or validation type selected");
   				return;
   			}
			}

			// Set up the event handler for the asynchronous data request.
			CalValStartConnect.onreadystatechange = ProcessTextChangeStart;
	
			CalValStartConnect.open("GET", sendstr, true);		 // The file to get scan set up ssu.txt
			CalValStartConnect.send();
		} // End GetCalValStartConnect


		// Handle return data from start of calval
		function ProcessTextChangeStart() {
	
			// Check the return status.
			if ((CalValStartConnect.readyState == 4) && (CalValStartConnect.status == 200)) {
				var rtext = CalValStartConnect.responseText;

				// Start the log update timer
			} // End if have data
  	} // End ProcessTextChangeStart function


		// Call from "Submit" button 
		function PostCalValConnect()	{

			// Set up the event handler for the asynchronous data request.
			CalValConnect.onreadystatechange = ProcessTextChange;

//			var sendstr = "calval.txt?CTP=" + document.getElementById("IdCTP").value;

			var sendstr = "calval.txt?CTP=" + document.getElementById("IdCTP").value + "&" +
				"VTP=" + document.getElementById("IdVTP").value + "&" +
				"CPP=" + document.getElementById("IdCPP").value + "&" +
				"VPP=" + document.getElementById("IdVPP").value + "&" +
				"CITP=" + document.getElementById("IdCITP").value + "&" +
				"VITP=" + document.getElementById("IdVITP").value + "&" +
				"CIPP=" + document.getElementById("IdCIPP").value + "&" +
				"VIPP=" + document.getElementById("IdVIPP").value + "&" +
				"CMTP=" + document.getElementById("IdCMTP").value + "&" +
				"VMTP=" + document.getElementById("IdVMTP").value + "&" +
				"CMPP=" + document.getElementById("IdCMPP").value + "&" +
				"VMPP=" + document.getElementById("IdVMPP").value + "&" +
//				"TBS=" + document.getElementById("IdTBS").value + "&" +
//				"PBS=" + document.getElementById("IdPBS").value + "&" +
				"OIP=" + document.getElementById("IdOIP").value + "&" +
				"ODF=" + document.getElementById("IdODF").value + "&" +
				"OD=" + document.getElementById("IdOD").value + "&" +
				"CIP=" + document.getElementById("IdCIP").value + "&" +
				"CD=" + document.getElementById("IdCD").value  + "&" +
				"CP=" + document.getElementById("IdCP").value  + "&" +
				"CN=" + document.getElementById("IdCN").value  + "&" +
				"OP=" + document.getElementById("IdOP").value;
	
			sendstr = sendstr.replace( /\s/g, ""); 
			CalValConnect.open("GET", sendstr, true);		 // The file to get scan set up ssu.txt
			CalValConnect.send();
		} // End PostRemoteConnect

		// Handle data sent back from device
		function ProcessTextChange() {

			// Check the return status.
			if ((CalValConnect.readyState == 4) && (CalValConnect.status == 200))	{
				var rtext = CalValConnect.responseText;
				// Expect:
				// CTP=n & VTP=n & CPP=n & VPP=n & 
				// CITP=n & VITP=n & CIPP=n & VIPP=n &
				// CMTP=n & VMTP=n & CMPP=n & VMPP=n & 
				// OIP=n & OD=n & CIP=n & CD=n
				// CP=n & CN=n & OP=n
				var vars = rtext.split("&");		  // Group all the variables sorted by the &, 18 total

				// CTP=<val>
				var p = vars[0].split("=");
				document.getElementById("IdCTP").value = p[1];

				// VTP=<val>
				p = vars[1].split("=");
				document.getElementById("IdVTP").value = p[1];

				// CPP=<val>
				p = vars[2].split("=");
				document.getElementById("IdCPP").value = p[1];

				// VPP=<val>
				p = vars[3].split("=");
				document.getElementById("IdVPP").value = p[1];

				// CITP=<val>
				p = vars[4].split("=");
				document.getElementById("IdCITP").value = p[1];

				// VITP=<val>
				p = vars[5].split("=");
				document.getElementById("IdVITP").value = p[1];

				// CIPP=<val>
				p = vars[6].split("=");
				document.getElementById("IdCIPP").value = p[1];

				// VIPP=<val>
				p = vars[7].split("=");
				document.getElementById("IdVIPP").value = p[1];

				// CMTP=<val>
				p = vars[8].split("=");
				document.getElementById("IdCMTP").value = p[1];

				// VMTP=<val>
				p = vars[9].split("=");
				document.getElementById("IdVMTP").value = p[1];

				// CMPP=<val>
				p = vars[10].split("=");
				document.getElementById("IdCMPP").value = p[1];

				// VMPP=<val>
				p = vars[11].split("=");
				document.getElementById("IdVMPP").value = p[1];

				// TBS=<val>
//				p = vars[12].split("=");
//				document.getElementById("IdTBS").value = p[1];

				// PBS=<val>
//				p = vars[13].split("=");
//				document.getElementById("IdPBS").value = p[1];

				// OIP=<val>
				p = vars[12].split("=");
				document.getElementById("IdOIP").value = p[1];
		
				// ODF
				p = vars[13].split("=");
				document.getElementById("IdODF").value = p[1];

				// OD=<val>
				p = vars[14].split("=");
				document.getElementById("IdOD").value = p[1];

				// CIP=<val>
				p = vars[15].split("=");
				document.getElementById("IdCIP").value = p[1];

				// CD=<val>
				p = vars[16].split("=");
				document.getElementById("IdCD").value = p[1];

				// CP=<val>
				p = vars[17].split("=");
				document.getElementById("IdCP").value = p[1];

				// CN=<val>
				p = vars[18].split("=");
				document.getElementById("IdCN").value = p[1];

				// OP=<val>
				p = vars[19].split("=");
				document.getElementById("IdOP").value = p[1];
			} // End if have data
		} // End ProcessTextChange

		// Handle data sent back from device
		function AddText() {
			logTextBuf += "Test \r\n"; 
			document.getElementById("logtext").value = logTextBuf;
		} // End AddText

		// Call when timer event fires
  	function timerhandler() {

//			logTextBuf += "Handler:"; 
//			document.getElementById("logtext").value = logTextBuf;
			// Set up the event handler for the asynchronous data request.
			LogDataConnect.onreadystatechange = ProcessLogDataTextChange;

 			// Create the request and send it.
			LogDataConnect.open("GET", "logdata.txt", true);		 // The file to get the log data
			LogDataConnect.send();	   	 						 
		} // End timerHandler

		// Handle data sent back from device
		function ProcessLogDataTextChange() {

			// Check the return status.
			if ((LogDataConnect.readyState == 4) && (LogDataConnect.status == 200))	{
				var rtext = LogDataConnect.responseText;

				var vars = rtext.split("&");

				if (vars[0] == "End") {
					// End of calibration / validation
					clearInterval(iTimer);
					logTextBuf += "Done with cal/val\r\n"; 
					document.getElementById("logtext").value = logTextBuf;
				} else if (vars[0] == "Data") {
					// Add text to logtext area
					logTextBuf += vars[1]; 
					document.getElementById("logtext").value = logTextBuf;
				}
			} // End have data
		} // End ProcessLogDataTextChange

		// Delete calibration table
		function DelAll() {

			// Confirm box
			var r = window.confirm("Caution you are about to delete the calibration table. Do you want to proceed?");
			if (r == true) {
				GetDelAllConnect();
			}
		} // End delete calibration table

		function GetDelAllConnect() {
			var sendstr;
			sendstr = "delall.txt";

			// Set up the event handler for the asynchronous data request.
			DelAllConnect.onreadystatechange = ProcessDelAllTextChange;
	
			DelAllConnect.open("GET", sendstr, true);		 // The file to get scan set up ssu.txt
			DelAllConnect.send();
		} // End GetDelAllConnect

		// Handle data sent back from device
		function ProcessDelAllTextChange() {

			// Check the return status.
			if ((DelAllConnect.readyState == 4) && (DelAllConnect.status == 200))	{
				var rtext = DelAllConnect.responseText;

				var vars = rtext.split("&");

				logTextBuf += "Delete All Finished\r\n"; 
				document.getElementById("logtext").value = logTextBuf;
			} // End have data
		} // End ProcessDelAllTextChange

		function GetCalPtsConnect() {
			var sendstr;
			sendstr = "calpts.txt";

			// Set up the event handler for the asynchronous data request.
			CalPtsConnect.onreadystatechange = ProcessTextChangeCalPts;
	
			CalPtsConnect.open("GET", sendstr, true);		 // The file to get calpts
			CalPtsConnect.send();
		} // End GetCalPtsConnect

		// Handle data sent back from device
		function ProcessTextChangeCalPts() {

			// Check the return status.
			if ((CalPtsConnect.readyState == 4) && (CalPtsConnect.status == 200))	{
				var rtext = CalPtsConnect.responseText;

				logTextBuf += rtext; 
				document.getElementById("logtext").value = logTextBuf;
			} // End have data
		} // End ProcessDelAllTextChange

		function GetSaveConnect() {
			var sendstr;
			sendstr = "savec.txt";

			// Set up the event handler for the asynchronous data request.
			SaveConnect.onreadystatechange = ProcessTextChangeSave;
	
			SaveConnect.open("GET", sendstr, true);		 // The file to do a save
			SaveConnect.send();
		} // End GetCalPtsConnect

		// Handle data sent back from device
		function ProcessTextChangeSave() {

			// Check the return status.
			if ((SaveConnect.readyState == 4) && (SaveConnect.status == 200))	{
				var rtext = SaveConnect.responseText;

				logTextBuf += rtext; 
				document.getElementById("logtext").value = logTextBuf;
			} // End have data
		} // End SaveConnect

	</script>

  <body onload="Jload();">

		<div id="cmdarea"  style="height:40px; width:100%; border:4px; overflow:auto;">
			<table id="cmdareatab" style="width:100%; border-collapse: collapse; border: 1px solid black; background-color: #7CA8E1;">
 				<tr>
					<td style="width:75px;"><a href="javascript:StartCalVal()" style="text-decoration:none"><font color="blue" size = "4"><b>Start</b></font></a></td>
					<td style="width:75px;"><a href="javascript:StopCalVal()" style="text-decoration:none"><font color="blue" size = "4"><b>Stop</b></font></a></td>
				 	<td style="width:130px;"><a href="Report.csv" download style="text-decoration:none"><font color="blue"><b>Get Report..</b></font></a></td>
				 	<td style="width:125px;"><a href="Insert.txt" download style="text-decoration:none"><font color="blue"><b>Get Table..</b></font></a></td>
				 	<td style="width:180px;"><a href="javascript:GetCalPtsConnect()" style="text-decoration:none"><font color="blue"><b>Cal/Val Points Check</b></font></a></td>
				 	<td style="width:120px;"><a href="javascript:DelAll()" style="text-decoration:none"><font color="blue"><b>Delete All</b></font></a></td>
				 	<td style="width:150px;"><a href="javascript:docalz()" style="text-decoration:none"><font color="blue"><b>Zero Cal</b></font></a></td>
				 	<td style="text-align:right;"><a href="javascript:GetSaveConnect()" style="text-decoration:none"><font color="blue"><b>Save</b></font></a></td>
				</tr>
 			</table>
 		</div>  

		<div id="calvaltype" style="height:60px; width:100%; border:4px; overflow:auto; ">
			<table id="calvaltypetab" style="width:100%; border-collapse: collapse; border: 1px solid black; background-color: #B3C8E4;">
				<tr><th colspan="4" style="text-align:center;">Type of Calibration-Validation</th></tr>
					<tr>
						<td style="border-collapse: collapse; border: 1px solid black;">
							<input type="checkbox" name="caltype" id="idC" checked>Calibration
							<input type="checkbox" name="caltype" id="idV">Validation
						</td>
					</tr>
				</table>
			</div>

			<div id="calvalset" style="height:220px; width:100%; border:4px; overflow:auto; ">
				<table id="calvalsettab" style="width:100%; border-collapse: collapse; border: 1px solid black; background-color: #B3C8E4;">
					<tr>
						<td style="border-collapse: collapse; border: 1px solid black;">
							<table id="caltemptab">
			   				<tr><th colspan="2">Calibartion Temperature</th></tr>
			   				<tr><td>Temperature points:</td><td><input type="text" id="IdCTP" size="7" value="11"></td></tr>
								<tr><td>Minimum temperature point:</td><td><input type="text" id="IdCITP" size="7" value="0"></td></tr>
								<tr><td>Maximum temperature point:</td><td><input type="text" id="IdCMTP" size="7" value="75"></td></tr>
							</table>
						</td>
	
						<td style="border-collapse: collapse; border: 1px solid black;">
							<table id="valtemptab">
			   				<tr><th colspan="2">Validation Temperature</th></tr>
			   				<tr><td>Temperature points:</td><td><input type="text" id="IdVTP" size="7" value="11"></td></tr>
								<tr><td>Minimum temperature point:</td><td><input type="text" id="IdVITP" size="7" value="0"></td></tr>
								<tr><td>Maximum temperature point:</td><td><input type="text" id="IdVMTP" size="7" value="75"></td></tr>
								<tr><td></td></tr>
							</table>
						</td>	

						<td style="border-collapse: collapse; border: 1px solid black;">
							<table id="calpresstab">
								<tr><th colspan="2">Calibration Pressure</th></tr>
								<tr><td>Pressure points:</td><td><input type="text" id="IdCPP" size="7" value="11"></td></tr>
								<tr><td>Minimum pressure point:</td><td><input type="text" id="IdCIPP" size="7" value="0"></td></tr>
								<tr><td>Maximum pressure point:</td><td><input type="text" id="IdCMPP" size="7" value="0"></td></tr>
							</table>
						</td>	

						<td style="border-collapse: collapse; border: 1px solid black;">
							<table id="valpresstab">
			   				<tr><th colspan="2">Validation Pressure</th></tr>
								<tr><td>Pressure points:</td><td><input type="text" id="IdVPP" size="7" value="11"></td></tr>
								<tr><td>Minimum pressure point:</td><td><input type="text" id="IdVIPP" size="7" value="0"></td></tr>
								<tr><td>Maximum pressure point:</td><td><input type="text" id="IdVMPP" size="7" value="0"></td></tr>
								<tr><td></td></tr>
							</table>
						</td>	
					</tr>
	 				<tr>
						<td colspan="2" style="border-collapse: collapse; border: 1px solid black;">
							<table id="oventab">
			   				<tr><th colspan="3">Oven</th></tr>
								<tr>
									<td>IP:<input type="text" id="IdOIP" size="14" value="888.888.888.888"></td>
									<td>Port:<input type="text" id="IdOP" size="4" value="1025"></td>
									<td>First Dwell (Min):<input type="text" id="IdODF" size="5" value="90"></td>
									<td>Other Dwells (Min):<input type="text" id="IdOD" size="5" value="90"></td>
								</tr>
							</table>
						</td>

						<td colspan="2" style="border-collapse: collapse; border: 1px solid black;">						
							<table id="caltab">
								<tr>
			   				<tr><th colspan="4">Calibrator</th></tr>
									<td>IP:<input type="text" id="IdCIP" size="14" value="888.888.888.888"></td>
									<td>Port:<input type="text" id="IdCP" size="4" value="1025"></td>
									<td>Number:<input type="text" id="IdCN" size="2" value="1"></td>
									<td>Dwell (Seconds):<input type="text" id="IdCD" size="5" value="0"></td>
								</tr>
							</table>
						</td>
					</tr>
	 				<tr><td colspan="4" style="text-align:center;"><input type="button" onclick="PostCalValConnect()" value="Submit"></td></tr>
				</table>
 
			</div> 

			<div style="height:450px; width:100%; border: 4px; vertical-align: top; overflow:auto;">
				<textarea id="logtext" style="height:98%; width:99%;  border-collapse: collapse; border: 1px solid black; background-color: rgb(231,231,231);">
				</textarea>
			</div>
  </body>
</html>